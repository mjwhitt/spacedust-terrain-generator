#!/usr/bin/env ruby
ENV['BUNDLE_GEMFILE'] = File.expand_path(File.join(File.dirname(__FILE__), '..', 'Gemfile'))

require 'rubygems'
require 'bundler/setup'
require 'trollop'
require_relative '../lib/terrain'

options = Trollop::options do
  banner "Usage: generate [options]"
  banner ""
  opt :seed, "Random seed (default: random)", :type => :int
  opt :size, "Terrain size (0-9) (default: random)", :type => :int
  opt :type, "Terrain type (#{Terrain::TYPES.join(', ')}, all) (default: random)", :type => :string
  opt :octaves, "Number of octaves to combine (default: random)", :type => :int
  opt :continuous_color, "Use continuous color instead of discrete steps", :type => :boolean
  opt :grayscale, "Grayscale instead of color", :type => :boolean
  banner ""
  opt :verbose, "Print debug messages to stderr.", :type => :boolean, :default => false
  banner ""
end

options[:type] = options[:type].to_sym if options[:type]

Trollop::die :size, "must be 0-#{Terrain::SIZES.size - 1}" unless (0...Terrain::SIZES.size).cover?(options[:size]) || options[:size].nil?
Trollop::die :type, "must be #{Terrain::TYPES.join(", ")}" unless Terrain::TYPES.member?(options[:type]) || options[:type].nil? || options[:type] == :all

if options[:type] == :all
  Terrain::TYPES.each do |type|
    options[:type] = type
    terrain = Terrain.new(options)
    terrain.generate
    options[:grayscale] ? terrain.output_grayscale : terrain.output
  end
else
  terrain = Terrain.new(options)
  terrain.generate
  options[:grayscale] ? terrain.output_grayscale : terrain.output
end

